< 자료형 >
- int : 부호 O 정수
- unit : 부호 X 정수
- float : 실수
- complex : 복소수
- bool : 논리형
- string_ : 문자열
- object : 파이썬 객체
- unicode : 유니코드



※ import numpy as np 

ex_1)
import numpy as np
lst1=[1,2,3,4,5]
print(lst1) -> [1, 2, 3, 4, 5]
arr1=np.array(lst1)
print(arr1) -> [1 2 3 4 5]        // numpy 배열은 쉼표 없이 출력, type(arr1) : numpy.ndarray
                                                                              -> ndarray 타입 : 모든 차원에 대한 자료형O

len(arr1) -> 5


ex_2)
lst2 = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]]
arr2 = np.array(lst2)



< 크기 >
- len() 함수 : 1차원에서의 총 개수 구하는 함수
  len(arr2) -> 4
- size() 함수 : 원소의 개수(크기) 구하는 함수
  print(np.size(arr1)) -> 5
  print(np.size(arr2)) -> 12
  -> 원소의 개수



< 차원 >
- ndim 함수 : n차원인지 구하는 함수
  print(np.ndim(arr1)) -> 1
  print(np.ndim(arr2)) -> 2

- shape 함수 : 각 차원의 원소의 개수 세는 함수
  print(np.shape(arr1)) -> (5,)
  print(np.shape(arr2)) -> (4, 3)


< 자료형 확인 >
- dtype 함수 : 데이터의 자료형 확인 함수
  print(arr1.dtype) -> int32
  print(arr2.dtype) -> int32
  
- astype 함수 : 다른 데이터 타입으로 변경 함수
  print(arr1.astype(float)) -> [1. 2. 3. 4. 5.]
  print(arr1.astype(complex)) -> [1.+0.j 2.+0.j 3.+0.j 4.+0.j 5.+0.j]         // complex : 복소수
  print(arr1.astype(np.string_)) -> [b'1' b'2' b'3' b'4' b'5']                // 문자열로 변경 시 string(X), np.string(O)




< 배열 생성 함수 >
- np.nan, np.inf
  NaN(Not a Number) : 숫자가 아님을 뜻하는 상수
  INF(Infinite) : 무한대 값
  
  
- asfarray() : 배열을 float 자료형으로 바꿔서 생성하는 함수

- asarray_chkfinite(check finite) : np.nan or np.inf가 배열에 들어있는지 확인
  ex)
  import numpy as np
  arr4=np.array([1,2,3,4])
  arr5=np.array([1,2,np.nan,4])
  print(np.asarray_chkfinite(arr4))
  print(np.asarray_chkfinite(arr5))
  -> 배열에 들어있는 경우 ValueError 발생
  -> 들어있지 않을 경우 : 배열 출력


- arange() : ndarray 반환하는 함수(range 함수와 비슷한 역할)
  ex)
  print(np.arange(5))
  -> [0 1 2 3 4]
  print(np.arange(3, 10))
  -> [3 4 5 6 7 8 9]
  print(np.arange(2, 10, 2))
  -> [2 4 6 8]
  
     
- linspace(), logspace() : 숫자 범위 사이에서 선형 or 로그 간격으로 일정하게 숫자 배열
  - numpy.linspace(start, stop, num, endpoint, retstep, dtype)
  - numpy.logspace(start, stop, num, endpoint, base, dtype)
  
  ex)
  print(np.linspace(0, 1, 4))
  -> [0.         0.33333333 0.66666667 1.        ]
  print(np.logspace(0.1, 1, 10))
  -> [ 1.25892541  1.58489319  1.99526231  2.51188643  3.16227766  3.98107171  5.01187234  6.30957344  7.94328235 10.        ]
     
- zeros(), ones(), full() : 특정값으로 전체 배열을 채워주는 함수(zeros : 0, ones : 1)
  ex)
  print(np.zeros(5))
  -> [0. 0. 0. 0. 0.]           // float64
  print(np.zeros((2, 3)))
  ->[[0. 0. 0.]  
     [0. 0. 0.]]
  
  print(np.ones(3))
  -> [1. 1. 1.]
  print(np.ones((2, 3, 4)))
  -> [[[1. 1. 1. 1.]  
       [1. 1. 1. 1.]  
       [1. 1. 1. 1.]]  
       
     [[1. 1. 1. 1.]  
      [1. 1. 1. 1.] 
      [1. 1. 1. 1.]]]
  
  print(np.full(3, 4))
  -> [4 4 4]
  print(np.full((2, 4), 5))
  -> [[5 5 5 5]  
      [5 5 5 5]]
  
  
- eye, identity : 2차원 항등행렬을 만드는 함수
  (항등행렬 : 행렬이 정방행렬이고, 주대각선 상의 원소들이 1이고, 나머지의 원소들이 0일 경우)
  (정방행렬(square matrix) : 같은 수의 행과 열을 가지는 행렬)
  ex)
  print(np.eye(3))
  -> [[1. 0. 0.]
      [0. 1. 0.]
      [0. 0. 1.]]
  print(np.identity(4))
  -> [[1. 0. 0. 0.]
      [0. 1. 0. 0.]
      [0. 0. 1. 0.]
      [0. 0. 0. 1.]]
  
  
- reshape() 함수 : 1차원 배열을 다차원 배열로 바꿔주는 함수
  ex_1)
  arr6 = np.arange(12)
  print(arr6)
  -> [ 0  1  2  3  4  5  6  7  8  9 10 11]
  print(np.arange(12).reshape(3,4))
  ->  [[ 0  1  2  3]
       [ 4  5  6  7]
       [ 8  9 10 11]]
  
  ex_2) 전체 길이를 모른 상태로 한 쪽 길이만 지정해야 할 때(-1 사용)
  arr8 = np.arange(12)
  print(arr8.reshape(3, -1))
  -> [[ 0  1  2  3]
      [ 4  5  6  7]
      [ 8  9 10 11]]
  print(arr8.reshape(4, -1))
  -> [[ 0  1  2]
      [ 3  4  5]
      [ 6  7  8]
      [ 9 10 11]]



< numpy 배열 슬라이싱 & 인덱싱 >
ex_1)
import numpy as np
lst1=[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]
arr1=np.array(lst1)
print(arr1)
-> [[ 1  2  3]
    [ 4  5  6]
    [ 7  8  9]
    [10 11 12]]

print(arr1[0:2, 0:2])         // 0, 1 행의 0, 1번 열
-> [[1 2]
    [4 5]]

print(arr1[1:, 2:])           // 1~ 행의 2~ 번 열
-> [[ 6]
    [ 9]
    [12]]

print(arr1[0])
print(arr1[0, ])
print(arr1[0, :])
-> [1 2 3]

print(arr1[:, 0])
-> [ 1  4  7 10]



< numpy 배열 복사 >
.copy() 함수 : 값만 복사(주소 X)         // 대입연산자(=) 사용 -> 주소 복사
ex)
arr2 = np.arange(7)
arr3 = arr2[1:5].copy()                 // .copy() 함수 사용 -> 값만 복사
print(arr2)
print(arr3)
-> [0 1 2 3 4 5 6]
   [1 2 3 4]
   
arr3[2]=10
print(arr2)
print(arr3)
-> [0 1 2 3 4 5 6]
   [ 1  2 10  4]



< numpy 배열 인덱싱 >
ex)
print(arr1)
-> [[ 1  2  3]
    [ 4  5  6]
    [ 7  8  9]
    [10 11 12]]
    
print(arr1[0,2])
-> 3

print(arr1[[0,2],[1,2]])                // (0, 1), (2, 2)
-> [2 9]                                    행 열   행 열



< 논리형 인덱싱 >
논리형 인덱싱 : True, False로 구분되는 값들에 대해 배열들의 값을 선택하는 것
ex_1)
lst1=[[1,2,3],[4,5,6],[7,8,9]]
blst=[[False, True, True],[True, False, False], [True, True, False]]
arr1=np.array(lst1)
barr1=np.array(blst)
print(arr1)
-> [[ 1  2  3]
    [ 4  5  6]
    [ 7  8  9]]
print(arr1[barr1])
-> [2 3 4 7 8]                // True 자리의 값들만 남는다.

print(arr1[arr1%2==0])        // 배열의 값으로 논리형 값 계산(인덱스 X)
-> [2 4 6 8]
print(arr1[arr1%3==0])
-> [3 6 9]


ex_2)
subject=np.array(['math','math','lang', 'chem', 'math', 'phys', 'chem'])
data = np.arange(28).reshape(7, 4)
print(data)
-> [[ 0  1  2  3]
    [ 4  5  6  7]
    [ 8  9 10 11]
    [12 13 14 15]
    [16 17 18 19]
    [20 21 22 23]
    [24 25 26 27]]
    
print(subject)
-> ['math' 'math' 'lang' 'chem' 'math' 'phys' 'chem']

print(subject=='math')
-> [ True  True False False  True False False]

print(data[subject=='math', :])                        // 'math' : subject's 0, 1, 4 index
-> [[ 0  1  2  3]
    [ 4  5  6  7]
    [16 17 18 19]]
    
print(data[(subject=='math')|(subject=='chem'), :])   // 'chem' : subject's 3, 6 index
-> [[ 0  1  2  3]
    [ 4  5  6  7]
    [12 13 14 15]
    [16 17 18 19]
    [24 25 26 27]]




< 난수 생성 함수 >
난수 생성 함수 : 각종 분포 생성(이항분포, 정규분포 등)

● seed : 난수 생성 시 동일한 값 추출할 때 사용(난수 생성의 초기값 부여)    ★★★★★
  -> np.random.seed()

● 정규분포 함수 : random.normal(loc, scale, size)
  -> loc : 평균, scale : 표준편차, size : 개수(기본 : loc 0, scale 1)
  ex)
  // 처음 2개의 값은 다름
  print(np.random.normal(size=5))
  -> [ 1.15003572  0.99194602  0.95332413 -2.02125482 -0.33407737]
  print(np.random.normal(size=5))
  -> [ 0.00211836  0.40545341  0.28909194  1.32115819 -1.54690555]

  // seed 설정 후 처음 시작하는 값 동일
  np.random.seed(seed=1234)
  print(np.random.normal(size=5))
  -> [ 0.47143516 -1.19097569  1.43270697 -0.3126519  -0.72058873]
  print(np.random.normal(size=5))
  -> [ 0.88716294  0.85958841 -0.6365235   0.01569637 -2.24268495]
  np.random.seed(seed=1234)
  print(np.random.normal(size=5))
  -> [ 0.47143516 -1.19097569  1.43270697 -0.3126519  -0.72058873]



● 표준정규분포 : random.randn(size)
  ex)
  print(np.random.randn(10))
  print(np.random.randn(5, 4))
  

● 이항분포 : random.binomial(n, p, size)
  - 
  ex)
  print(np.random.binomial(n=1, p=0.5, size=5))


● 초기하분포 : random.hypergeometric(ngood, nbad, nsample, size)
  - 비복원 추출, N개 중 n번 추출 시 원하는 것 k개가 뽑힐 확률 표현
  ex)
  print(np.random.hypergeometric(ngood=5, nbad=10, nsample=10, size=10))
  
  
● 포아송 분포 : random.poisson(lam, size)
  - 단위 시간 안에 어떤 사건이 몇 번 발생할 것인지 표현
  ex)
  print(np.random.poisson(lam=5, size=10))


● T 분포 : random.standard_t(df, size)
  - 정규 분포의 평균을 측정할 때 주로 사용
  ex)
  print(np.random.standard_t(df=5, size=10))
  

● F 분포 : f(dfnum, dfden, size)
  ex)
  print(np.random.f(dfnum=5, dfden=10, size=10))
  

● 균등분포 : random.uniform(low, high, size)
  ex)
  print(np.random.uniform(low=0.0, high=5.0, size=7))
  
  
● 이산형 균등분포(정수형) : randint(low, high, size) -> low ~ high값 미만
  - 이산확률분포 중 확률 함수가 정의된 모든 곳에서 그 값이 일정한 분포
  ex)
  print(np.random.randint(low=0, high=10, size=10))
  
  
● 카이제곱분포(χ2 분포) : chisquare(df, size)
  - 독립적인 표준정규 확률변수를 각각 제곱한 다음 합해서 얻어진 분포
  ex)
  print(np.random.chisquare(df=5, size=10))


● 감마 분포 : gamma(shape, scale, size)
  - 연속 확률분포
  ex)
  print(np.random.gamma(shape=4, scale=4, size=10))

< 순서를 바꾸는 함수 >
● random.permutation() : 실행한 순간에만 바꿈
● random.shuffle() : 바꿔준 후에도 유지
  ex)
  import numpy as np
  x=np.arange(7)
  print(x)

  print(np.random.permutation(x))
  print(x)

  print(np.random.shuffle(x))
  print(x)
  -> [0 1 2 3 4 5 6]
     [5 4 6 3 2 1 0]                // permutation 함수 실행
     [0 1 2 3 4 5 6]                // 원상복구
     None                           // shuffle 함수 실행
     [5 1 6 3 0 2 4]                // 완전히 바뀜


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

< Numpy 배열 연산 >

● 연산자 이용
  ex)
  x=np.array([1,2,3,4,5])
  print(x + 1)
  -> [2 3 4 5 6]
  print(x - 1)
  -> [0 1 2 3 4]
  print(x * 2)
  -> [ 2  4  6  8 10]
  print(x / 2)
  -> [0.5 1.  1.5 2.  2.5]
  print(x // 2)
  -> [0 1 1 2 2]
  print(x % 2)
  -> [1 0 1 0 1]
  print(x ** 2)
  -> [ 1  4  9 16 25]
  print(2 ** x)
  -> [ 2  4  8 16 32]
  
  
  ★ 배열끼리 연산 가능

● 연산 함수 이용
  ex_1)
  y=np.array([2,3,4,5,6])
  print(np.add(x, y))              // 덧셈
  -> [ 3  5  7  9 11]
  print(np.subtract(x, y))         // 뺄셈
  -> [-1 -1 -1 -1 -1]
  print(np.multiply(x, y))         // 곱셈
  -> [ 2  6 12 20 30]
  print(np.divide(x, y))           // 나눗셈
  -> [0.5        0.66666667 0.75       0.8        0.83333333]
  print(np.power(x, y))            // 제곱수
  -> [    1     8    81  1024 15625]
  print(np.mod(x,y))              // 나머지
  -> [1 2 3 4 5]
  
  
  ex_2)
  z = np.array([-1, 3, 5])
  print(np.abs(z))                // numpy.abs() : 절댓값을 구하는 함수
  -> [1 3 5]
  print(np.fabs(z))               // numpy.fabs() : 절댓값을 실수로 반환
  -> [1. 3. 5.]
  
  
  ex_3)
  y=np.array([2,3,4,5,6])
  z=np.array([-1, 3, -5])
  print(np.sqrt(y))                                                   // 제곱근
  -> [1.41421356 1.73205081 2.         2.23606798 2.44948974]
  print(np.square(y))                                                 // 제곱수
  -> [ 4  9 16 25 36]
  print(np.exp(y))                                                    // 지수함수
  -> [  7.3890561   20.08553692  54.59815003 148.4131591  403.42879349]
  print(np.log(y))                                                    // 자연로그(e)
  -> [0.69314718 1.09861229 1.38629436 1.60943791 1.79175947]
  print(np.log10(y))                                                  // 로그(밑 : 10)
  -> [0.30103    0.47712125 0.60205999 0.69897    0.77815125]
  print(np.log2(y))                                                   // 로그(밑 : 2)
  -> [1.         1.5849625  2.         2.32192809 2.5849625 ]
  print(np.sign(z))                                                   // 양수 : 1, 음수 : -1
  -> [-1  1 -1]
  
  
  ex_4) numpy.diff(x, n) 함수 : 요소들간의 차이(n : n차례 차이를 구한다.)
  x=np.array([1,2,5,10,35,98])
  print(np.diff(x))
  -> [ 1  3  5 25 63]
  print(np.diff(x, n=2))
  -> [ 2  2 20 38]
  print(np.diff(x, n=3))
  -> [ 0 18 18]
  
  
  ex_5)
  a=np.array([1,2,3,4])
  b=np.array([[1,2],[3,4]])
  print(np.prod(a))                               // numpy.prod() : 배열의 요소들의 곱
  -> 24
  print(np.prod(b, axis=0))                       // axis = n : n차원들의 곱(axis = 0 : 1차원들의 곱)
  -> [3 8] (1 * 3, 2 * 4)
  print(np.prod(b, axis=1))                       // axis = 1 -> 2차원들의 곱
  -> [ 2 12] (1 * 2, 3 * 4)
  
  
  ex_6)
  a = np.random.randint(0, 100, 5)
  b = np.random.randint(0, 100, 5)
  print(a)
  print(b)
  -> [72 32 82 13 92]
     [18 52 81 22 58]
  print(np.maximum(a, b))                         // 배열의 요소들에서 같은 위치에 있는 max값
  -> [72 52 82 22 92]
  print(np.maximum(a, b))                         // 배열의 요소들에서 같은 위치에 있는 min값
  -> [18 32 81 13 58]
  




< 수학 함수 >
● 소수
  ex_1)
  a=np.array([3.14, -5.21, 9.69, -1.87, 0])
  print(np.ceil(a))                                     // 소수점 올림 함수
  -> [ 4. -5. 10. -1.  0.]
  print(np.floor(a))                                    // 소수점 내림 함수
  -> [ 3. -6.  9. -2.  0.]
  print(np.rint(a))                                     // 소수점 반올림
  -> [ 3. -5. 10. -2.  0.]
  print(np.around(a))
  -> [ 3. -5. 10. -2.  0.]
  
  ex_2)
  print(np.round_(a, 1))                                // 주어진 소수점 자릿수까지 반올림 
  -> [ 3.1 -5.2  9.7 -1.9  0. ]                            (n = 1 : 소수점 1자리까지, n = -1 : 십의 자리까지)
  print(np.round_(a, -1))
  -> [  0. -10.  10.  -0.   0.]
  print(np.fix(a))                                      // 0의 방향으로 가까운 정수로 올림 or 내림
  -> [ 3. -5.  9. -1.  0.]
  print(np.trunc(a))                                    // 소수점을 없애기
  -> [ 3. -5.  9. -1.  0.]



● 삼각함수
  - 삼각함수 사용 시 라디안 값 사용
  ex_1)
  print(np.sin(90))                                     // 삼각함수의 값 return
  print(np.cos(90))
  print(np.tan(90))
  print(np.sinh(90))                                    // 하이퍼볼릭 삼각함수의 값 return
  print(np.cosh(90))
  print(np.tanh(90))
  
  ex_2)
  print(np.arcsin(0.5))                                 // 역삼각함수 값 return
  print(np.arcsinh(0.5))
  print(np.arccos(0.5))
  print(np.arccosh(1.5))                                // 하이퍼볼릭 역삼각함수 값 return
  print(np.arctan(0.5))
  print(np.arctanh(0.5))





< 통계 함수 >
- 주어진 배열들의 값에 대한 통계 값 제공
  ex_1)
  a=np.random.randn(5, 4)
  print(a.sum())                                        // 전체 원소의 합
  print(np.sum(a))
  print(a.mean())                                       // 평균 값
  print(np.mean(a))
  
  
  
  ex_2)
  print(np.corrcoef(a))                                 // 상관계수
  print(np.std(a))                                      // 표준편차
  print(np.var(a))                                      // 분산
  
  
  
  ex_3)
  print(np.min(a))                                      // 배열 전체의 최솟값
  print(np.max(a))                                      // 배열 전체의 최댓값
  print(np.argmin(a))                                   // min값의 index 위치
  print(np.argmax(a))                                   // max값의 index 위치
  
  
  
  ex_4)
  print(np.cumsum(a))                                   // 각 원소들의 누적 합 표시
  print(np.cumprod(a))                                  // 각 원소들의 누적 곱 표시
  
  
  
  ★★★★★
  ex_5)
  print(a.sum(axis=0))                                  // axis 이용 -> 축의 번호 지정 가능
  print(np.sum(a, axis=0))
  print(a.sum(axis=1))
  print(np.sum(a, axis=1))
  
  
  
  
  ex_6)
  a=np.array([1,2,3,4])
  b=np.sum(a)
  c=np.sum(a, keepdims=True)                // keepdims : 통계 값을 구할 때 차원을 유지한 채로 통계 값을 구할 수 있다.
  print(b)                                     -> keepdims == True, 1차원인 a의 차원을 유지한채로 10 출력
  -> 10
  print(c)
  -> [10]
 
